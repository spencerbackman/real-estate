/// <reference types="node" />
import { ParsedUrlQueryInput } from 'querystring';
import { Client } from './client';
import { Filter } from './filter';
import { SearchStream } from './search-stream';
export interface IFilterParams extends ParsedUrlQueryInput {
    $count?: boolean;
    $filter?: string;
    $orderby?: string;
    $select?: string;
    $skip?: number;
    $top?: number;
    $expand?: string;
}
export interface IRetsOptions {
    count?: number;
    limit?: number;
    offset?: number;
    restrictedIndicator?: string;
    select?: string;
    orderBy?: string;
    stream?: boolean;
    expand?: string;
}
export declare class Search {
    client: Client;
    stream: SearchStream;
    filter: Filter;
    constructor(client: Client);
    options(config?: IRetsOptions): IRetsOptions;
    parseQueryResponse(data: object): {
        count: any;
        nextLink: any;
        replyCode: string;
        replyTag: string;
        replyText: string;
        results: any;
        rowsReceived: any;
    };
    query(resource: string, className: string, query: string, config?: IRetsOptions): Promise<{
        count: any;
        nextLink: any;
        replyCode: string;
        replyTag: string;
        replyText: string;
        results: any;
        rowsReceived: any;
    }>;
}
