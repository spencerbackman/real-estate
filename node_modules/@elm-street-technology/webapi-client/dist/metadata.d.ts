import { Client } from './client';
import { IEnumType, IProperty, ISchema } from './metadata-parser';
interface IResource {
    ResourceID: string;
    StandardName: string;
    VisibleName: string;
    Description: string;
    KeyField: string;
    ClassCount: string;
    ClassVersion: string;
    ClassDate: string;
    ObjectVersion: string;
    ObjectDate: string;
    SearchHelpVersion: string;
    SearchHelpDate: string;
    EditMaskVersion: string;
    EditMaskDate: string;
    LookupVersion: string;
    LookupDate: string;
    UpdateHelpVersion: string;
    UpdateHelpDate: string;
    ValidationExpressionVersion: string;
    ValidationExpressionDate: string;
    ValidationLookupVersion: string;
    ValidationLookupDate: string;
    ValidationExternalVersion: string;
    ValidationExternalDate: string;
}
interface IResourceResponse {
    results: Array<{
        info: {
            Date: string | null;
            Version: string | null;
            rowsReceived: string | number;
        };
        metadata: IResource[];
    }>;
}
export declare class MetaData {
    metadata?: ISchema[];
    enums?: object[];
    client: Client;
    constructor(client: Client);
    _getMetaData(): Promise<any>;
    _getEnum(type: string): Promise<IEnumType | undefined>;
    transformType(type: string): Promise<string>;
    _getDataType(property: IProperty): Promise<{
        DataType: string;
    }>;
    _getLookup(path: string): Promise<IEnumType | undefined>;
    _getTableLookups(property: any): Promise<{
        Interpretation?: string;
        LookupName?: string;
    }>;
    getDataSystem(): Promise<{
        '@odata.etag': null;
        DataDictionaryVersion: string;
        DateTimeStamp: null;
        ID: null;
        Name: string;
        Nucleus_RecordDeleteFlag: null;
        Resources: {
            DateTimeStamp: null;
            Description: string;
            Localizations: never[];
            Name: string;
            ResourcePath: string | undefined;
            TimeZoneOffset: number;
        }[];
        ServiceURI: string;
        TransportVersion: null;
    }>;
    getResources(): Promise<IResourceResponse>;
    getTable(id: string, classType: string): Promise<{
        results: {
            info: {
                Class: string;
                Date: any;
                Resource: string;
                rowsReceived: number;
                Version: any;
            };
            metadata: ({
                Alignment: string;
                Case: string;
                DBName: any;
                Default: string;
                DefaultSearchOrder: string;
                EditMaskID: string;
                FilterParentField: string;
                ForeignField: string;
                ForeignKeyName: string;
                Index: string;
                InKeyIndex: string;
                Interpretation: string;
                LongName: any;
                LookupName: string;
                Maximum: string;
                MaximumLength: any;
                MaxSelect: string;
                MetadataEntryID: any;
                Minimum: string;
                ModTimeStamp: string;
                Precision: any;
                Required: any;
                Searchable: string;
                SearchHelpID: string;
                ShortName: any;
                StandardName: any;
                SystemName: any;
                Unique: string;
                Units: string;
                UseSeparator: string;
            } & {
                Interpretation?: string | undefined;
                LookupName?: string | undefined;
            } & {
                DataType: string;
            })[];
            type: string;
        }[];
    }>;
    getClass(id: string): Promise<{
        results: {
            info: {
                Date: any;
                Resource: string;
                rowsReceived: number;
                Version: any;
            };
            metadata: {
                ClassName: string | undefined;
                ClassTimeStamp: string;
                DeletedFlagField: string;
                DeletedFlagValue: string;
                Description: any;
                HasKeyIndex: string;
                OffsetSupport: string;
                StandardName: any;
                TableDate: any;
                TableVersion: string;
                UpdateDate: string;
                UpdateVersion: string;
                VisibleName: any;
            }[];
        }[];
        type: string;
    }>;
    getObject(id: string): Promise<{
        results: {
            info: {
                Date: string;
                Resource: string;
                rowsReceived: number;
                Version: string;
            };
            metadata: never[];
        }[];
        type: string;
    }>;
    getAnnotationLabel(row: any): any;
    getLookupTypes(id: string, lookup: string): Promise<{
        results: {
            info: {
                Date: string;
                Lookup: string;
                Resource: string;
                rowsReceived: number;
                Version: string;
            };
            metadata: {
                LongValue: any;
                MetadataEntryID: string;
                ShortValue: any;
                Value: string;
            }[];
        }[];
        type: string;
    }>;
    private _getSchemaFromPath;
    private _getEntityFromPath;
    private _getEnumFromPath;
}
export {};
