"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bluebird_1 = __importDefault(require("bluebird"));
var lodash_1 = __importDefault(require("lodash"));
var util_1 = __importDefault(require("util"));
var rets_reply_error_1 = __importDefault(require("./errors/rets-reply-error"));
var metadata_parser_1 = require("./metadata-parser");
var MetaData = /** @class */ (function () {
    function MetaData(client) {
        this.client = client;
    }
    MetaData.prototype._getMetaData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, parser, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.metadata) {
                            return [2 /*return*/, this.metadata];
                        }
                        return [4 /*yield*/, this.client.request({
                                url: this.client.buildUrl('metadata'),
                            })];
                    case 1:
                        data = (_b.sent()).data;
                        parser = new metadata_parser_1.MetadataParser();
                        _a = this;
                        return [4 /*yield*/, parser.parse(data)];
                    case 2:
                        _a.metadata = _b.sent();
                        return [2 /*return*/, this.metadata];
                }
            });
        });
    };
    MetaData.prototype._getEnum = function (type) {
        return __awaiter(this, void 0, void 0, function () {
            var metadata;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getMetaData()];
                    case 1:
                        metadata = _a.sent();
                        return [2 /*return*/, this._getEnumFromPath(metadata, type)];
                }
            });
        });
    };
    MetaData.prototype.transformType = function (type) {
        return __awaiter(this, void 0, void 0, function () {
            var newType, typeMap;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        newType = type.replace('Edm.', '');
                        typeMap = {
                            Boolean: 'Boolean',
                            Byte: 'Byte',
                            byte: 'Character',
                            Date: 'Date',
                            DateTimeOffset: 'DateTime',
                            Decimal: 'Decimal',
                            GeographyPoint: 'Point',
                            Int16: 'Int',
                            Int32: 'Int',
                            Int64: 'Int',
                            String: 'Character',
                        };
                        return [4 /*yield*/, this._getLookup(type)];
                    case 1:
                        if (_a.sent()) {
                            newType = 'Character';
                        }
                        if (lodash_1.default.has(typeMap, newType)) {
                            return [2 /*return*/, lodash_1.default.get(typeMap, newType)];
                        }
                        return [2 /*return*/, newType];
                }
            });
        });
    };
    MetaData.prototype._getDataType = function (property) {
        return __awaiter(this, void 0, void 0, function () {
            var dataType;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.transformType(property.type)];
                    case 1:
                        dataType = _a.sent();
                        return [2 /*return*/, { DataType: dataType }];
                }
            });
        });
    };
    MetaData.prototype._getLookup = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        res = /^(Collection)?\(?\.?(.*?)\)?$/i.exec(path);
                        if (!res) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._getEnum(res[2])];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    MetaData.prototype._getTableLookups = function (property) {
        return __awaiter(this, void 0, void 0, function () {
            var res, lookupObj;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        res = /^(Collection)?\(?\.?(.*?)\)?$/i.exec(property.type);
                        if (!res) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._getEnum(res[2])];
                    case 1:
                        lookupObj = _a.sent();
                        if (lookupObj) {
                            return [2 /*return*/, {
                                    Interpretation: lookupObj.isFlags === true || res[1] === 'Collection' ? 'LookupMulti' : 'Lookup',
                                    LookupName: res[2],
                                }];
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/, {}];
                }
            });
        });
    };
    MetaData.prototype.getDataSystem = function () {
        return __awaiter(this, void 0, void 0, function () {
            var metadata, dataSystems;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getMetaData()];
                    case 1:
                        metadata = _a.sent();
                        dataSystems = this._getSchemaFromPath(metadata, 'Default');
                        if (!dataSystems) {
                            throw new Error('No Datasystem Found');
                        }
                        return [2 /*return*/, Object.assign({}, {
                                '@odata.etag': null,
                                DataDictionaryVersion: '',
                                DateTimeStamp: null,
                                ID: null,
                                Name: 'Default',
                                Nucleus_RecordDeleteFlag: null,
                                Resources: dataSystems.entityTypes.map(function (row) { return ({
                                    DateTimeStamp: null,
                                    Description: row.name,
                                    Localizations: [],
                                    Name: row.name,
                                    ResourcePath: row.type,
                                    TimeZoneOffset: 0,
                                }); }),
                                ServiceURI: this.client.settings.apiUrl,
                                TransportVersion: null,
                            })];
                }
            });
        });
    };
    MetaData.prototype.getResources = function () {
        return __awaiter(this, void 0, void 0, function () {
            var metadata, info;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getMetaData()];
                    case 1:
                        metadata = _a.sent();
                        return [4 /*yield*/, this.getDataSystem()];
                    case 2:
                        info = _a.sent();
                        return [2 /*return*/, {
                                results: [
                                    {
                                        info: {
                                            Date: info.DateTimeStamp,
                                            rowsReceived: info.Resources.length,
                                            Version: info.TransportVersion,
                                        },
                                        metadata: info.Resources.map(function (resource) {
                                            var schema = _this._getEntityFromPath(metadata, resource.ResourcePath);
                                            return {
                                                ClassCount: '',
                                                ClassDate: resource.DateTimeStamp || '',
                                                ClassVersion: '',
                                                Description: resource.Description || '',
                                                EditMaskDate: '',
                                                EditMaskVersion: '',
                                                KeyField: schema ? schema.primaryKey || '' : '',
                                                LookupDate: '',
                                                LookupVersion: '',
                                                ObjectDate: resource.DateTimeStamp || '',
                                                ObjectVersion: '',
                                                ResourceID: lodash_1.default.get(schema, 'path', ''),
                                                SearchHelpDate: '',
                                                SearchHelpVersion: '',
                                                StandardName: resource.name,
                                                UpdateHelpDate: '',
                                                UpdateHelpVersion: '',
                                                ValidationExpressionDate: '',
                                                ValidationExpressionVersion: '',
                                                ValidationExternalDate: '',
                                                ValidationExternalVersion: '',
                                                ValidationLookupDate: '',
                                                ValidationLookupVersion: '',
                                                VisibleName: resource.name,
                                            };
                                        }),
                                    },
                                ],
                            }];
                }
            });
        });
    };
    MetaData.prototype.getTable = function (id, classType) {
        return __awaiter(this, void 0, void 0, function () {
            var metadata, allResources, schema, resource, _a, _b;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!id) {
                            throw new Error('Resource type id is required (or for some types of metadata, "0" retrieves for all resource types)');
                        }
                        return [4 /*yield*/, this._getMetaData()];
                    case 1:
                        metadata = _c.sent();
                        return [4 /*yield*/, this.getResources()];
                    case 2:
                        allResources = _c.sent();
                        schema = this._getEntityFromPath(metadata, id);
                        resource = lodash_1.default.find(lodash_1.default.get(allResources, 'results.0.metadata'), {
                            ResourceID: id,
                        });
                        if (!resource) {
                            throw new rets_reply_error_1.default({ retsMethod: 'getMetadata' }, 20513, 'Invalid Resource Requested');
                        }
                        _a = {};
                        _b = {
                            info: {
                                Class: id,
                                Date: resource.ClassDate,
                                Resource: id,
                                rowsReceived: (schema && schema.properties.length) || 0,
                                Version: metadata && metadata.info ? metadata.info.Version : '',
                            }
                        };
                        return [4 /*yield*/, bluebird_1.default.mapSeries((schema && schema.properties) || [], function (property) { return __awaiter(_this, void 0, void 0, function () {
                                var _a, _b, _c;
                                return __generator(this, function (_d) {
                                    switch (_d.label) {
                                        case 0:
                                            _b = (_a = Object).assign;
                                            _c = [{},
                                                {
                                                    Alignment: '',
                                                    Case: '',
                                                    DBName: property.name,
                                                    Default: '',
                                                    DefaultSearchOrder: '',
                                                    EditMaskID: '',
                                                    FilterParentField: '',
                                                    ForeignField: '',
                                                    ForeignKeyName: '',
                                                    Index: '',
                                                    InKeyIndex: '',
                                                    Interpretation: '',
                                                    LongName: this.getAnnotationLabel(property) || property.name,
                                                    LookupName: '',
                                                    Maximum: '',
                                                    MaximumLength: lodash_1.default.get(property, 'maxLength', ''),
                                                    MaxSelect: '',
                                                    MetadataEntryID: property.name,
                                                    Minimum: '',
                                                    ModTimeStamp: '',
                                                    Precision: lodash_1.default.get(property, 'precision', ''),
                                                    Required: lodash_1.default.get(property, 'nullable', ''),
                                                    Searchable: '1',
                                                    SearchHelpID: '',
                                                    ShortName: this.getAnnotationLabel(property) || property.name,
                                                    StandardName: property.name,
                                                    SystemName: property.name,
                                                    Unique: '',
                                                    Units: '',
                                                    UseSeparator: '',
                                                }];
                                            return [4 /*yield*/, this._getTableLookups(property)];
                                        case 1:
                                            _c = _c.concat([_d.sent()]);
                                            return [4 /*yield*/, this._getDataType(property)];
                                        case 2: return [2 /*return*/, _b.apply(_a, _c.concat([_d.sent()]))];
                                    }
                                });
                            }); })];
                    case 3: return [2 /*return*/, (_a.results = [
                            (_b.metadata = _c.sent(),
                                _b.type = 'METADATA-TABLE',
                                _b)
                        ],
                            _a)];
                }
            });
        });
    };
    MetaData.prototype.getClass = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var allResources, metadata, resource, entity;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getResources()];
                    case 1:
                        allResources = _a.sent();
                        return [4 /*yield*/, this._getMetaData()];
                    case 2:
                        metadata = _a.sent();
                        resource = lodash_1.default.find(lodash_1.default.get(allResources, 'results.0.metadata'), {
                            ResourceID: id,
                        });
                        entity = this._getEntityFromPath(metadata, id);
                        if (!resource) {
                            throw new rets_reply_error_1.default({ retsMethod: 'getMetadata' }, 20513, 'Invalid Resource Requested');
                        }
                        return [2 /*return*/, {
                                results: [
                                    {
                                        info: {
                                            Date: resource.ClassDate,
                                            Resource: id,
                                            rowsReceived: 1,
                                            Version: metadata && metadata.info ? metadata.info.Version : '',
                                        },
                                        metadata: [
                                            {
                                                ClassName: lodash_1.default.get(entity, 'name', id.split('.').pop()),
                                                ClassTimeStamp: '',
                                                DeletedFlagField: '',
                                                DeletedFlagValue: '',
                                                Description: resource.Description,
                                                HasKeyIndex: '1',
                                                OffsetSupport: '1',
                                                StandardName: resource.ResourcePath,
                                                TableDate: resource.ClassDate,
                                                TableVersion: '',
                                                UpdateDate: '',
                                                UpdateVersion: '',
                                                VisibleName: resource.Name,
                                            },
                                        ],
                                    },
                                ],
                                type: 'METADATA-CLASS',
                            }];
                }
            });
        });
    };
    MetaData.prototype.getObject = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var metadata, entity;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getMetaData()];
                    case 1:
                        metadata = _a.sent();
                        entity = this._getEntityFromPath(metadata, id);
                        if (!entity) {
                            throw new rets_reply_error_1.default({ retsMethod: 'getMetadata' }, 20513, 'Invalid Resource Requested');
                        }
                        return [2 /*return*/, {
                                results: [
                                    {
                                        info: {
                                            Date: '',
                                            Resource: id,
                                            rowsReceived: 0,
                                            Version: '',
                                        },
                                        metadata: [],
                                    },
                                ],
                                type: 'METADATA-OBJECT',
                            }];
                }
            });
        });
    };
    MetaData.prototype.getAnnotationLabel = function (row) {
        var annotation = row.annotations;
        if (util_1.default.isArray(annotation)) {
            return lodash_1.default.get(lodash_1.default.first(annotation), 'value');
        }
        return lodash_1.default.get(annotation, 'value');
    };
    MetaData.prototype.getLookupTypes = function (id, lookup) {
        return __awaiter(this, void 0, void 0, function () {
            var lookupObj, enums;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getEnum(lookup)];
                    case 1:
                        lookupObj = _a.sent();
                        if (!lookupObj) {
                            throw new Error('No Lookup Value Found');
                        }
                        enums = lookupObj.enums;
                        return [2 /*return*/, {
                                results: [
                                    {
                                        info: {
                                            Date: '',
                                            Lookup: lookup,
                                            Resource: id,
                                            rowsReceived: enums.length,
                                            Version: '',
                                        },
                                        metadata: enums.map(function (row) { return ({
                                            LongValue: _this.getAnnotationLabel(row) || row.name,
                                            MetadataEntryID: row.name,
                                            ShortValue: _this.getAnnotationLabel(row) || row.name,
                                            Value: row.name,
                                        }); }),
                                    },
                                ],
                                type: 'METADATA-LOOKUP_TYPE',
                            }];
                }
            });
        });
    };
    MetaData.prototype._getSchemaFromPath = function (metadata, schemaPath) {
        return lodash_1.default.find(metadata, { path: schemaPath });
    };
    MetaData.prototype._getEntityFromPath = function (metadata, entityPath) {
        if (!metadata) {
            return;
        }
        var entityType;
        lodash_1.default.each(metadata, function (schema) {
            var res = lodash_1.default.find(schema.entityTypes, { path: entityPath });
            if (res) {
                entityType = res;
            }
        });
        return entityType;
    };
    MetaData.prototype._getEnumFromPath = function (metadata, enumPath) {
        var enumType;
        lodash_1.default.each(metadata, function (schema) {
            var res = lodash_1.default.find(schema.enumTypes, { path: enumPath });
            if (res) {
                enumType = res;
            }
        });
        return enumType;
    };
    return MetaData;
}());
exports.MetaData = MetaData;
//# sourceMappingURL=metadata.js.map