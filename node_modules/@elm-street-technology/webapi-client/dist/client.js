"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var bluebird_1 = __importDefault(require("bluebird"));
var lodash_1 = __importDefault(require("lodash"));
var querystring_1 = __importDefault(require("querystring"));
var url_1 = __importDefault(require("url"));
var rets_server_error_1 = __importDefault(require("./errors/rets-server-error"));
var metadata_1 = require("./metadata");
var search_1 = require("./search");
var Client = /** @class */ (function () {
    function Client(settings) {
        this.settings = settings;
        this.request = axios_1.default.create();
        this.metadata = new metadata_1.MetaData(this);
        this.search = new search_1.Search(this);
        this.timeout = 60000;
        this.urls = {
            metadata: this.getUrl(settings, 'metadata', this.settings.apiUrl + "/$metadata"),
            search: this.getUrl(settings, 'search', this.settings.apiUrl + "/[resource]"),
            stream: this.getUrl(settings, 'stream', this.settings.apiUrl + "/[resource]"),
        };
    }
    Client.getAutoLogoutClient = function (settings, handler) {
        return __awaiter(this, void 0, void 0, function () {
            var client, e_1, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = new Client(settings);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.login()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        throw new rets_server_error_1.default({ retsMethod: 'login' }, lodash_1.default.get(e_1, 'response.status', 400), lodash_1.default.get(e_1, 'response.data.value', e_1.message), e_1);
                    case 4: return [4 /*yield*/, bluebird_1.default.try(function () { return handler(client); })];
                    case 5:
                        result = _a.sent();
                        return [4 /*yield*/, client.logout()];
                    case 6:
                        _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    Client.prototype.getUrl = function (settings, key, defaultUrl) {
        if (settings && settings.urls && !lodash_1.default.isEmpty(settings.urls[key])) {
            return url_1.default.resolve(settings.apiUrl, "" + settings.urls[key]);
        }
        return defaultUrl;
    };
    Client.prototype.buildUrl = function (type, options) {
        if (options === void 0) { options = {}; }
        var base = this.replaceParts(this.urls[type], options.replacements);
        var baseUrl = url_1.default.parse(base);
        var baseQuery = querystring_1.default.parse(baseUrl.query || '') || {};
        var newParams = Object.assign({}, baseQuery, options.query);
        baseUrl.query = querystring_1.default.encode(newParams);
        baseUrl.search = ("?" + baseUrl.query).replace(/([&\?])%24/g, '$1$');
        return url_1.default.format(baseUrl);
    };
    Client.prototype.replaceParts = function (url, replacements) {
        if (!replacements) {
            return url;
        }
        return lodash_1.default.reduce(replacements, function (out, value, key) {
            return out.replace("[" + key + "]", value);
        }, url);
    };
    Client.prototype.login = function () {
        switch (this.settings.auth.strategy) {
            case 'oauth2':
                return this.loginOauth2();
            case 'basic':
                return this.loginBasicAuth();
            case 'token':
                return this.loginTokenAuth();
        }
    };
    Client.prototype.retryRequest = function (requestParams, tries, delay) {
        if (delay === void 0) { delay = 1000; }
        return __awaiter(this, void 0, void 0, function () {
            var result, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 8]);
                        return [4 /*yield*/, this.request(requestParams)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result];
                    case 2:
                        error_1 = _a.sent();
                        if (!(error_1.response && error_1.response.status === 401)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.login()];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, bluebird_1.default.delay(delay)];
                    case 4:
                        _a.sent();
                        return [2 /*return*/, this.retryRequest(requestParams, tries - 1, delay)];
                    case 5:
                        if (!(tries > 1)) return [3 /*break*/, 7];
                        return [4 /*yield*/, bluebird_1.default.delay(delay)];
                    case 6:
                        _a.sent();
                        return [2 /*return*/, this.retryRequest(requestParams, tries - 1, delay)];
                    case 7: throw error_1;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    Client.prototype.logout = function () {
        return Promise.resolve();
    };
    Client.prototype.loginBasicAuth = function () {
        if (this.settings.auth.strategy !== 'basic') {
            throw new Error('Basic Auth Not Configured');
        }
        this.request = axios_1.default.create({
            auth: {
                password: this.settings.auth.password,
                username: this.settings.auth.username,
            },
            baseURL: this.settings.apiUrl,
            headers: Object.assign({
                'Accept-Encoding': 'gzip, deflate',
            }, this.settings.auth.headers),
            timeout: this.timeout,
        });
        return Promise.resolve();
    };
    Client.prototype.loginTokenAuth = function () {
        if (this.settings.auth.strategy !== 'token') {
            throw new Error('token Auth Not Configured');
        }
        this.request = axios_1.default.create({
            baseURL: this.settings.apiUrl,
            headers: Object.assign({
                'Accept-Encoding': 'gzip, deflate',
                Authorization: "" + this.settings.auth.password,
            }, this.settings.auth.headers),
            timeout: this.timeout,
        });
        return Promise.resolve();
    };
    Client.prototype.loginOauth2 = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.settings.auth.strategy !== 'oauth2') {
                            throw new Error('Oauth Strategy Not Configured');
                        }
                        return [4 /*yield*/, axios_1.default.request({
                                auth: {
                                    password: this.settings.auth.password,
                                    username: this.settings.auth.username,
                                },
                                data: querystring_1.default.stringify({
                                    grant_type: this.settings.auth.grantType,
                                    scope: this.settings.auth.scope,
                                }),
                                headers: Object.assign({
                                    'Accept-Encoding': 'gzip, deflate',
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                }, this.settings.auth.headers),
                                method: 'post',
                                url: this.settings.auth.loginUrl,
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        this.token = data;
                        this.request = axios_1.default.create({
                            baseURL: this.settings.apiUrl,
                            headers: Object.assign({
                                'Accept-Encoding': 'gzip, deflate',
                                Authorization: this.token.token_type + " " + this.token.access_token,
                            }, this.settings.auth.headers),
                            timeout: this.timeout,
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    return Client;
}());
exports.Client = Client;
//# sourceMappingURL=client.js.map