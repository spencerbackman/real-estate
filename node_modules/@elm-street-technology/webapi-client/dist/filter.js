"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var Filter = /** @class */ (function () {
    function Filter(client) {
        this.client = client;
    }
    Filter.prototype.getOperator = function (op, op2) {
        switch (op2) {
            case '+':
                return 'ge';
            case '-':
                return 'le';
            default:
                return 'eq';
        }
    };
    Filter.prototype.joinOperator = function (op) {
        switch (op) {
            case ',':
                return ' and ';
            case '|':
                return ' or ';
            default:
                return '';
        }
    };
    Filter.prototype.escapeValue = function (value, field) {
        if (lodash_1.get(field, 'DataType') === 'Character') {
            return "'" + value.replace(/\\([\s\S])|(')/g, '\\$1$2') + "'";
        }
        return value;
    };
    Filter.prototype.formatValues = function (values, lookup, op, field) {
        var _this = this;
        var items = (values || '').split(',') || [];
        var group = items.map(function (v) { return lookup + " " + _this.escapeValue(v, field); });
        switch (op) {
            case '=+':
                return "(" + group.join(' and ') + ")";
            case '=|':
                return "(" + group.join(' or ') + ")";
            case '=':
                return "(" + group.join(' or ') + ")";
            default:
                return group[0];
        }
    };
    Filter.prototype.parseDMQL = function (value, fields) {
        var _this = this;
        var matchSection = /\(\w[^\)](.*?)\)(\||,)?/gm;
        var matchComponents = /\((\w+)(=\||=\+|=)(.*?)(\+|-)?\)(\||,)?/;
        var matches = value.match(matchSection) || [];
        var newValue = value;
        return matches.reduce(function (out, item, index) {
            var match = matchComponents.exec(item);
            var key = match && match[1];
            var operator = match && match[2];
            var values = match && match[3];
            var spanOperator = match && match[4];
            var jOperator = match && match[5];
            var field = lodash_1.find(fields, { MetadataEntryID: key }) || null;
            var replace = "" + _this.formatValues(values, key + " " + _this.getOperator(operator, spanOperator), operator, field) + _this.joinOperator(jOperator);
            return out.replace(item, replace);
        }, value);
    };
    Filter.prototype.transform = function (table, filter) {
        return __awaiter(this, void 0, void 0, function () {
            var fields, _a, query;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = lodash_1.get;
                        return [4 /*yield*/, this.client.metadata.getTable(table, table)];
                    case 1:
                        fields = _a.apply(void 0, [_b.sent(), 'results.0.metadata']);
                        query = this.parseDMQL(filter, fields);
                        return [2 /*return*/, query];
                }
            });
        });
    };
    return Filter;
}());
exports.Filter = Filter;
//# sourceMappingURL=filter.js.map