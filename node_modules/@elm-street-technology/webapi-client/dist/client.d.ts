import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
import { MetaData } from './metadata';
import { Search } from './search';
interface IAuthToken {
    access_token: string;
    expires_in: number;
    token_type: string;
    headers?: {
        [key: string]: string;
    };
}
interface IOauth2Auth {
    strategy: 'oauth2';
    username: string;
    password: string;
    loginUrl: string;
    grantType: 'client_credentials';
    scope: string;
    headers?: {
        [key: string]: string;
    };
}
interface IBasicAuth {
    strategy: 'basic';
    username: string;
    password: string;
    headers?: {
        [key: string]: string;
    };
}
interface ITokenAuth {
    strategy: 'token';
    password: string;
    headers?: {
        [key: string]: string;
    };
}
interface IUrls {
    metadata: string;
    stream: string;
    search: string;
}
interface IUrlOptions {
    query?: {
        [key: string]: any;
    };
    replacements?: {
        [key: string]: string;
    };
}
interface IClientSettings {
    apiUrl: string;
    urls: Partial<IUrls>;
    auth: IOauth2Auth | IBasicAuth | ITokenAuth;
}
interface IAuthToken {
    access_token: string;
    expires_in: number;
    token_type: string;
}
export declare class Client {
    static getAutoLogoutClient(settings: IClientSettings, handler: (client: Client) => Promise<any>): Promise<any>;
    token?: IAuthToken;
    request: AxiosInstance;
    settings: IClientSettings;
    metadata: MetaData;
    search: Search;
    timeout: number;
    urls: IUrls;
    constructor(settings: IClientSettings);
    getUrl(settings: IClientSettings, key: keyof IUrls, defaultUrl: string): string;
    buildUrl(type: keyof IUrls, options?: IUrlOptions): string;
    replaceParts(url: string, replacements: {
        [key: string]: string;
    } | undefined): string;
    login(): Promise<void>;
    retryRequest(requestParams: AxiosRequestConfig, tries: number, delay?: number): Promise<AxiosResponse>;
    logout(): Promise<void>;
    loginBasicAuth(): Promise<void>;
    loginTokenAuth(): Promise<void>;
    loginOauth2(): Promise<void>;
}
export {};
