"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var rets_reply_error_1 = __importDefault(require("./errors/rets-reply-error"));
var filter_1 = require("./filter");
var search_stream_1 = require("./search-stream");
var Search = /** @class */ (function () {
    function Search(client) {
        this.client = client;
        this.stream = new search_stream_1.SearchStream(this.client, this);
        this.filter = new filter_1.Filter(this.client);
    }
    Search.prototype.options = function (config) {
        if (config === void 0) { config = {}; }
        return Object.assign({}, {
            limit: 500,
            offset: 0,
            restrictedIndicator: '***',
        }, config);
    };
    Search.prototype.parseQueryResponse = function (data) {
        return {
            count: lodash_1.get(data, '@odata.count', 0),
            nextLink: lodash_1.get(data, '@odata.nextLink'),
            replyCode: '0',
            replyTag: 'OPERATION_SUCCESSFUL',
            replyText: 'Success.',
            results: lodash_1.get(data, 'value', []),
            rowsReceived: lodash_1.get(data, 'value', []).length,
        };
    };
    Search.prototype.query = function (resource, className, query, config) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var options, params, _a, url, data, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = this.options(config);
                        if (options.count === 2) {
                            options.limit = 0;
                        }
                        params = {
                            $skip: options.offset,
                            $top: options.limit,
                        };
                        if (options.count) {
                            params.$count = true;
                        }
                        if (!query) return [3 /*break*/, 2];
                        _a = params;
                        return [4 /*yield*/, this.filter.transform(resource, query)];
                    case 1:
                        _a.$filter = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (options.select) {
                            params.$select = options.select;
                        }
                        if (options.orderBy) {
                            params.$orderby = options.orderBy;
                        }
                        if (options.expand) {
                            params.$expand = options.expand;
                        }
                        url = this.client.buildUrl(options.stream ? 'stream' : 'search', {
                            query: params,
                            replacements: {
                                resource: className,
                            },
                        });
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.client.retryRequest({
                                url: url,
                            }, 3)];
                    case 4:
                        data = (_b.sent()).data;
                        return [2 /*return*/, this.parseQueryResponse(data)];
                    case 5:
                        e_1 = _b.sent();
                        throw new rets_reply_error_1.default({ retsMethod: 'search' }, 20203, lodash_1.get(e_1, 'response.data.value', e_1.message), e_1);
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    return Search;
}());
exports.Search = Search;
//# sourceMappingURL=search.js.map