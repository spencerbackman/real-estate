export interface IEnumType {
    name: string;
    isFlags: boolean;
    underlyingType: string;
    enums: IMember[];
    path: string;
}
interface IAnnotation {
    term: string;
    value: null | string;
}
export interface IMember {
    name: string;
    value: string;
    annotations: IAnnotation[];
    path: string;
}
export interface ISchema {
    name: string;
    entityTypes: IEntityType[];
    enumTypes: IEnumType[];
    path: string;
}
export interface IEntityType {
    name: string;
    type?: string;
    path: string;
    primaryKey?: string;
    properties: IProperty[];
}
export interface IProperty {
    annotations: IAnnotation[];
    maxLength: null | string;
    name: string;
    nullable: null | string;
    path: string;
    precision: null | string;
    type: string;
    scale: null | string;
}
export declare class MetadataParser {
    private schemas;
    private parser;
    private currentEntityType;
    private currentProperty;
    private currentEnumType;
    private currentMember;
    private currentType;
    constructor(parserEncoding?: string);
    parse(rawData: string): Promise<ISchema[]>;
    toBool(value: boolean | string): boolean;
    tagStart(name: string, args: {
        [key: string]: string;
    }): void;
    getLastSchema(): ISchema;
    getCurrentType(): IMember | IProperty | undefined;
    tagEnd(name: string): void;
}
export {};
